// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/IBM/ibm-csi-common/pkg/metadata"
	"go.uber.org/zap"
)

type FakeNodeInfo struct {
	NewNodeMetadataStub        func(*zap.Logger) (metadata.NodeMetadata, error)
	newNodeMetadataMutex       sync.RWMutex
	newNodeMetadataArgsForCall []struct {
		arg1 *zap.Logger
	}
	newNodeMetadataReturns struct {
		result1 metadata.NodeMetadata
		result2 error
	}
	newNodeMetadataReturnsOnCall map[int]struct {
		result1 metadata.NodeMetadata
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodeInfo) NewNodeMetadata(arg1 *zap.Logger) (metadata.NodeMetadata, error) {
	fake.newNodeMetadataMutex.Lock()
	ret, specificReturn := fake.newNodeMetadataReturnsOnCall[len(fake.newNodeMetadataArgsForCall)]
	fake.newNodeMetadataArgsForCall = append(fake.newNodeMetadataArgsForCall, struct {
		arg1 *zap.Logger
	}{arg1})
	stub := fake.NewNodeMetadataStub
	fakeReturns := fake.newNodeMetadataReturns
	fake.recordInvocation("NewNodeMetadata", []interface{}{arg1})
	fake.newNodeMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNodeInfo) NewNodeMetadataCallCount() int {
	fake.newNodeMetadataMutex.RLock()
	defer fake.newNodeMetadataMutex.RUnlock()
	return len(fake.newNodeMetadataArgsForCall)
}

func (fake *FakeNodeInfo) NewNodeMetadataCalls(stub func(*zap.Logger) (metadata.NodeMetadata, error)) {
	fake.newNodeMetadataMutex.Lock()
	defer fake.newNodeMetadataMutex.Unlock()
	fake.NewNodeMetadataStub = stub
}

func (fake *FakeNodeInfo) NewNodeMetadataArgsForCall(i int) *zap.Logger {
	fake.newNodeMetadataMutex.RLock()
	defer fake.newNodeMetadataMutex.RUnlock()
	argsForCall := fake.newNodeMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodeInfo) NewNodeMetadataReturns(result1 metadata.NodeMetadata, result2 error) {
	fake.newNodeMetadataMutex.Lock()
	defer fake.newNodeMetadataMutex.Unlock()
	fake.NewNodeMetadataStub = nil
	fake.newNodeMetadataReturns = struct {
		result1 metadata.NodeMetadata
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeInfo) NewNodeMetadataReturnsOnCall(i int, result1 metadata.NodeMetadata, result2 error) {
	fake.newNodeMetadataMutex.Lock()
	defer fake.newNodeMetadataMutex.Unlock()
	fake.NewNodeMetadataStub = nil
	if fake.newNodeMetadataReturnsOnCall == nil {
		fake.newNodeMetadataReturnsOnCall = make(map[int]struct {
			result1 metadata.NodeMetadata
			result2 error
		})
	}
	fake.newNodeMetadataReturnsOnCall[i] = struct {
		result1 metadata.NodeMetadata
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeInfo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newNodeMetadataMutex.RLock()
	defer fake.newNodeMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodeInfo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metadata.NodeInfo = new(FakeNodeInfo)
